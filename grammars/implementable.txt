% GRAMATICA NOVA E MELHORADA 2.0 UHUL
% nao vai ter expressao jogada no meio do codigo

================================== MAIN==================================

<program> -> { <import> } <blocks> // IMPORTS EH OPICIONAL

<blocks> -> { <block> }+
<block> -> <stmt> SEPARATOR | <enclosed_blocks>
<enclosed_blocks> -> LEFT_BRACE <blocks> RIGHT_BRACE

<stmt> -> CONTINUE | BREAK | <return> | <void_command> | <compound_stmt> | <declrs> | <deref_pointer> <assignments_op> | <stmt_id>
<stmt_id> -> ID (<assignments_op> | <funcall_op>)


<struct> -> STRUCT ID LEFT_BRACE { <declrs> }+ RIGHT_BRACE


======================== COMPOUND STATEMENTS ==================

<compound_stmt> -> <control_structures> | <subprograms> | <struct>
<control_structures> -> <if> | <while> | <for>
<subprograms> -> <func> | <proc>

<func> -> FUNC <type> ID <enclosed_args> <enclosed_blocks>
<proc> -> PROC ID <enclosed_args> <enclosed_blocks>
<enclosed_args> -> LEFT_PAREN <args> RIGHT_PAREN
<args> -> TYPE ID { COMMA TYPE ID } | LAMBDA

<while> -> WHILE <enclosed_expr> <enclosed_blocks>
<for> -> FOR LEFT_PAREN [ <var_binding> ] SEMICOLON [ <expr> ] SEMICOLON [ <var_binding> ] RIGHT_PAREN <enclosed_blocks>
<if> -> IF <enclosed_expr> THEN <enclosed_blocks> [ ELSE ( <if> | <enclosed_blocks> ) ]

<return> -> RETURN [ <expr> ]

========================COMMAND & BINDINGS =================
DEPENDE DE EXPR
DEPENDE DE TYPE
=========

<var_binding> -> <assignments> | <declrs>

<declrs> -> <type> ID <assign_expr> { COMMA ID <assign_expr>}
<assign_expr> -> ASSIGN <expr>

<assignments> -> <assignment> { COMMA <assignment> }
<assignments_op> -> <assign_expr> { COMMA <assignment> }
<assignment> -> ID <assign_expr> | <deref_pointer> <assign_expr>


<void_command> -> <free> | <print> | <read>
<free> -> FREE <expr>
<print> -> PRINT LEFT_PAREN <expr> RIGHT_PAREN
<read> -> READ LEFT_PAREN ID RIGHT_PAREN


========================= EXPR ================================
DEPENDE DE TYPE
======
<enclosed_expr> -> LEFT_PAREN <expr> RIGHT_PAREN
<expr> -> <raw_expr> | <cast> <raw_expr>
<raw_expr> -> <un_op> <expr> | <enclosed_expr> | <raw_expr_term>
<raw_expr_term> -> <term> (<bin_op> <expr> | LAMBDA)

<un_op> -> NEGATION | MINUS
<bin_op> -> <arit_op> | <bool_op>
<arit_op> -> MINUS | PLUS | STAR | EXPO | DIV | MOD
<bool_op> -> LESSTHAN | GREATERTHAN | LESSEQUALS | GREATEREQUALS | EQUALS | DIFFERENCE

<casting> -> LEFT_BRACKET <type> RIGHT_BRACKET

<term> ->  <deref_pointer> | <literal> | <command_with_ret> | <term_id> | STRING <split_op>

<literal> -> INT_LIT | BOOL_LIT | DOUBLE_LIT | STRING_LIT

<ret_command> -> <alloc> | <addr> | <len> | <size_of>
<alloc> -> ALLOC <enclosed_expr>
<addr> -> ADDR LEFT_PAREN ID RIGHT_PAREN
<len> -> LEN LEFT_PAREN ID RIGHT_PAREN
<size_of> -> SIZEOF LEFT_PAREN <type> RIGHT_PAREN

<term_id> -> ID (<funcall_op> | <split_op>)
<split_op> -> LEFT_BRACKET [ <expr> ] COLON [ <expr> ] RIGHT_BRACKET

<funcall> -> ID <funcall_op>
<funcall_op> -> LEFT_PARENT <funcall_args> RIGHT_PARENT
<funcall_args> -> <expr> { COMMA <expr> } | LAMBDA

<deref_pointer> -> STAR ID

======================== TYPES ================================
NAO TEM DEPENDENCIAS
=======

<types> -> <type> { COMMA <type> }
<type> -> POINTER <enclosed_type>
          | LIST <enclosed_type>
          | ARRAY <enclosed_type>
          | HASHMAP LESS_THAN <type> COMMA <type> GREATER_THAN
          | TUPLE LESS_THAN <types> GREATER_THAN
          | <simple_type>
          | ID
<enclosed_type> -> LESS_THAN <type> GREATE_THAN
<simple_type> -> INT | BOOL | DOUBLE | STRING
