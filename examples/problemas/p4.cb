struct Rational_t {
    Int numerador, denominador;
}

// A)
func Rational_t createRat(Int a, Int b) {
    Rational_t ret;
    ret.numerador := a;
    ret.denominador := b;

    return ret;
}

// B)
func Bool areEqual(Rational_t a, Rational_t b) {
    Int num1 := a.numerador * b.denominador;
    Int num2 := a.denominador * b.numerador;

    return num1 == num2;
}

// C)
proc allOperations(Rational_t a, Rational_t b) {
    Rational_t resAdd := addRats(a,b);
    Rational_t resNegate := negateRat(a,b);
    Rational_t resSub := subtractRats(a,b);
    Rational_t resMultiply := multiplyRats(a,b);
    Rational_t resInvert := invertRat(a,b);
    Rational_t resDiv := divideRats(a,b);

    println("Resultado da soma: " + resAdd.numerador + "/" + resAdd.denominador));
    println("Resultado da negacao: " + resNegate.numerador + "/" + resNegate.denominador));
    println("Resultado da subtracao: " + resSub.numerador + "/" + resSub.denominador));
    println("Resultado da multiplicacao: " + resMultiply.numerador + "/" + resMultiply.denominador));
    println("Resultado da inversao: " + resInvert.numerador + "/" + resInvert.denominador));
    println("Resultado da divisao: " + resDiv.numerador + "/" + resDiv.denominador));

}
func Rational_t addRats(Rational_t a, Rational_t b) {
    Int num := a.numerador * b.denominador + a.denominador * b.numerador;
    Int den := a.denominador * b.denominador;

    return createRat(num, den);
}

func Rational_t negateRat(Rational_t a) {
    return createRat(a.numerador * -1, a.denominador);
}

func Rational_t subtractRats(Rational_t a, Rational_t b) {
    Int num := a.numerador * b.denominador - a.denominador * b.numerador;
    Int den := a.denominador * b.denominador;

    return createRat(num, den);
}

func Rational_t multiplyRats(Rational_t a, Rational_t b) {
    return createRat(a.numerador * b.numerador, a.denominador * b.denominador);
}

func Rational_t invertRat(Rational_t a) {
    return createRat(a.denominador, a.numerador);
}

func Rational_t divideRats(Rational_t a, Rational_t b) {
    return createRat(a.numerador * b.denominador, a.denominador * b.numerador);
}


Rational_t x := createRat(1, 1);
Rational_t y := createRat(2, 2);
Rational_t z := createRat(3, 2);


println("Parte A")
